// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contact.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_contact_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_contact_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_contact_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_contact_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contact_2eproto;
namespace contact {
class AddContactRequest;
struct AddContactRequestDefaultTypeInternal;
extern AddContactRequestDefaultTypeInternal _AddContactRequest_default_instance_;
class AddContactResponse;
struct AddContactResponseDefaultTypeInternal;
extern AddContactResponseDefaultTypeInternal _AddContactResponse_default_instance_;
class Contacts;
struct ContactsDefaultTypeInternal;
extern ContactsDefaultTypeInternal _Contacts_default_instance_;
class DelContactRequest;
struct DelContactRequestDefaultTypeInternal;
extern DelContactRequestDefaultTypeInternal _DelContactRequest_default_instance_;
class DelContactResponse;
struct DelContactResponseDefaultTypeInternal;
extern DelContactResponseDefaultTypeInternal _DelContactResponse_default_instance_;
class FindContactRequest;
struct FindContactRequestDefaultTypeInternal;
extern FindContactRequestDefaultTypeInternal _FindContactRequest_default_instance_;
class FindContactResponse;
struct FindContactResponseDefaultTypeInternal;
extern FindContactResponseDefaultTypeInternal _FindContactResponse_default_instance_;
class ListContactResponse;
struct ListContactResponseDefaultTypeInternal;
extern ListContactResponseDefaultTypeInternal _ListContactResponse_default_instance_;
class PeopleInfo;
struct PeopleInfoDefaultTypeInternal;
extern PeopleInfoDefaultTypeInternal _PeopleInfo_default_instance_;
class PeopleInfo_Phone;
struct PeopleInfo_PhoneDefaultTypeInternal;
extern PeopleInfo_PhoneDefaultTypeInternal _PeopleInfo_Phone_default_instance_;
}  // namespace contact
PROTOBUF_NAMESPACE_OPEN
template<> ::contact::AddContactRequest* Arena::CreateMaybeMessage<::contact::AddContactRequest>(Arena*);
template<> ::contact::AddContactResponse* Arena::CreateMaybeMessage<::contact::AddContactResponse>(Arena*);
template<> ::contact::Contacts* Arena::CreateMaybeMessage<::contact::Contacts>(Arena*);
template<> ::contact::DelContactRequest* Arena::CreateMaybeMessage<::contact::DelContactRequest>(Arena*);
template<> ::contact::DelContactResponse* Arena::CreateMaybeMessage<::contact::DelContactResponse>(Arena*);
template<> ::contact::FindContactRequest* Arena::CreateMaybeMessage<::contact::FindContactRequest>(Arena*);
template<> ::contact::FindContactResponse* Arena::CreateMaybeMessage<::contact::FindContactResponse>(Arena*);
template<> ::contact::ListContactResponse* Arena::CreateMaybeMessage<::contact::ListContactResponse>(Arena*);
template<> ::contact::PeopleInfo* Arena::CreateMaybeMessage<::contact::PeopleInfo>(Arena*);
template<> ::contact::PeopleInfo_Phone* Arena::CreateMaybeMessage<::contact::PeopleInfo_Phone>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace contact {

enum PeopleInfo_Phone_type : int {
  PeopleInfo_Phone_type_MOBILE = 0,
  PeopleInfo_Phone_type_TELEPHONE = 1,
  PeopleInfo_Phone_type_PeopleInfo_Phone_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PeopleInfo_Phone_type_PeopleInfo_Phone_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PeopleInfo_Phone_type_IsValid(int value);
constexpr PeopleInfo_Phone_type PeopleInfo_Phone_type_type_MIN = PeopleInfo_Phone_type_MOBILE;
constexpr PeopleInfo_Phone_type PeopleInfo_Phone_type_type_MAX = PeopleInfo_Phone_type_TELEPHONE;
constexpr int PeopleInfo_Phone_type_type_ARRAYSIZE = PeopleInfo_Phone_type_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeopleInfo_Phone_type_descriptor();
template<typename T>
inline const std::string& PeopleInfo_Phone_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PeopleInfo_Phone_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PeopleInfo_Phone_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PeopleInfo_Phone_type_descriptor(), enum_t_value);
}
inline bool PeopleInfo_Phone_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PeopleInfo_Phone_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PeopleInfo_Phone_type>(
    PeopleInfo_Phone_type_descriptor(), name, value);
}
enum WebStatus : int {
  SUCCESS = 0,
  CLIENT_ERR = 1,
  SERVER_ERR = 2,
  WebStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WebStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WebStatus_IsValid(int value);
constexpr WebStatus WebStatus_MIN = SUCCESS;
constexpr WebStatus WebStatus_MAX = SERVER_ERR;
constexpr int WebStatus_ARRAYSIZE = WebStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WebStatus_descriptor();
template<typename T>
inline const std::string& WebStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WebStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WebStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WebStatus_descriptor(), enum_t_value);
}
inline bool WebStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WebStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WebStatus>(
    WebStatus_descriptor(), name, value);
}
// ===================================================================

class PeopleInfo_Phone final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:contact.PeopleInfo.Phone) */ {
 public:
  inline PeopleInfo_Phone() : PeopleInfo_Phone(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PeopleInfo_Phone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeopleInfo_Phone(const PeopleInfo_Phone& from);
  PeopleInfo_Phone(PeopleInfo_Phone&& from) noexcept
    : PeopleInfo_Phone() {
    *this = ::std::move(from);
  }

  inline PeopleInfo_Phone& operator=(const PeopleInfo_Phone& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeopleInfo_Phone& operator=(PeopleInfo_Phone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeopleInfo_Phone& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeopleInfo_Phone* internal_default_instance() {
    return reinterpret_cast<const PeopleInfo_Phone*>(
               &_PeopleInfo_Phone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PeopleInfo_Phone& a, PeopleInfo_Phone& b) {
    a.Swap(&b);
  }
  inline void Swap(PeopleInfo_Phone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeopleInfo_Phone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeopleInfo_Phone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeopleInfo_Phone>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PeopleInfo_Phone& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PeopleInfo_Phone& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contact.PeopleInfo.Phone";
  }
  protected:
  explicit PeopleInfo_Phone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PeopleInfo_Phone_type type;
  static constexpr type MOBILE =
    PeopleInfo_Phone_type_MOBILE;
  static constexpr type TELEPHONE =
    PeopleInfo_Phone_type_TELEPHONE;
  static inline bool type_IsValid(int value) {
    return PeopleInfo_Phone_type_IsValid(value);
  }
  static constexpr type type_MIN =
    PeopleInfo_Phone_type_type_MIN;
  static constexpr type type_MAX =
    PeopleInfo_Phone_type_type_MAX;
  static constexpr int type_ARRAYSIZE =
    PeopleInfo_Phone_type_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  type_descriptor() {
    return PeopleInfo_Phone_type_descriptor();
  }
  template<typename T>
  static inline const std::string& type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function type_Name.");
    return PeopleInfo_Phone_type_Name(enum_t_value);
  }
  static inline bool type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      type* value) {
    return PeopleInfo_Phone_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:contact.PeopleInfo.Phone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_contact_2eproto;
};
// -------------------------------------------------------------------

class PeopleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contact.PeopleInfo) */ {
 public:
  inline PeopleInfo() : PeopleInfo(nullptr) {}
  ~PeopleInfo() override;
  explicit PROTOBUF_CONSTEXPR PeopleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeopleInfo(const PeopleInfo& from);
  PeopleInfo(PeopleInfo&& from) noexcept
    : PeopleInfo() {
    *this = ::std::move(from);
  }

  inline PeopleInfo& operator=(const PeopleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeopleInfo& operator=(PeopleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeopleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeopleInfo* internal_default_instance() {
    return reinterpret_cast<const PeopleInfo*>(
               &_PeopleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PeopleInfo& a, PeopleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PeopleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeopleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeopleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeopleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PeopleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PeopleInfo& from) {
    PeopleInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeopleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contact.PeopleInfo";
  }
  protected:
  explicit PeopleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PeopleInfo_Phone Phone;

  // accessors -------------------------------------------------------

  enum : int {
    kPhonesFieldNumber = 3,
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
  };
  // repeated .contact.PeopleInfo.Phone phones = 3;
  int phones_size() const;
  private:
  int _internal_phones_size() const;
  public:
  void clear_phones();
  ::contact::PeopleInfo_Phone* mutable_phones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contact::PeopleInfo_Phone >*
      mutable_phones();
  private:
  const ::contact::PeopleInfo_Phone& _internal_phones(int index) const;
  ::contact::PeopleInfo_Phone* _internal_add_phones();
  public:
  const ::contact::PeopleInfo_Phone& phones(int index) const;
  ::contact::PeopleInfo_Phone* add_phones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contact::PeopleInfo_Phone >&
      phones() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 age = 2;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:contact.PeopleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contact::PeopleInfo_Phone > phones_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t age_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contact_2eproto;
};
// -------------------------------------------------------------------

class Contacts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contact.Contacts) */ {
 public:
  inline Contacts() : Contacts(nullptr) {}
  ~Contacts() override;
  explicit PROTOBUF_CONSTEXPR Contacts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Contacts(const Contacts& from);
  Contacts(Contacts&& from) noexcept
    : Contacts() {
    *this = ::std::move(from);
  }

  inline Contacts& operator=(const Contacts& from) {
    CopyFrom(from);
    return *this;
  }
  inline Contacts& operator=(Contacts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Contacts& default_instance() {
    return *internal_default_instance();
  }
  static inline const Contacts* internal_default_instance() {
    return reinterpret_cast<const Contacts*>(
               &_Contacts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Contacts& a, Contacts& b) {
    a.Swap(&b);
  }
  inline void Swap(Contacts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Contacts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Contacts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Contacts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Contacts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Contacts& from) {
    Contacts::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Contacts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contact.Contacts";
  }
  protected:
  explicit Contacts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContactsFieldNumber = 1,
  };
  // repeated .contact.PeopleInfo contacts = 1;
  int contacts_size() const;
  private:
  int _internal_contacts_size() const;
  public:
  void clear_contacts();
  ::contact::PeopleInfo* mutable_contacts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contact::PeopleInfo >*
      mutable_contacts();
  private:
  const ::contact::PeopleInfo& _internal_contacts(int index) const;
  ::contact::PeopleInfo* _internal_add_contacts();
  public:
  const ::contact::PeopleInfo& contacts(int index) const;
  ::contact::PeopleInfo* add_contacts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contact::PeopleInfo >&
      contacts() const;

  // @@protoc_insertion_point(class_scope:contact.Contacts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contact::PeopleInfo > contacts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contact_2eproto;
};
// -------------------------------------------------------------------

class AddContactRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contact.AddContactRequest) */ {
 public:
  inline AddContactRequest() : AddContactRequest(nullptr) {}
  ~AddContactRequest() override;
  explicit PROTOBUF_CONSTEXPR AddContactRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddContactRequest(const AddContactRequest& from);
  AddContactRequest(AddContactRequest&& from) noexcept
    : AddContactRequest() {
    *this = ::std::move(from);
  }

  inline AddContactRequest& operator=(const AddContactRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddContactRequest& operator=(AddContactRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddContactRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddContactRequest* internal_default_instance() {
    return reinterpret_cast<const AddContactRequest*>(
               &_AddContactRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddContactRequest& a, AddContactRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddContactRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddContactRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddContactRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddContactRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddContactRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddContactRequest& from) {
    AddContactRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddContactRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contact.AddContactRequest";
  }
  protected:
  explicit AddContactRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kPeopleFieldNumber = 3,
    kStatusFieldNumber = 2,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .contact.PeopleInfo people = 3;
  bool has_people() const;
  private:
  bool _internal_has_people() const;
  public:
  void clear_people();
  const ::contact::PeopleInfo& people() const;
  PROTOBUF_NODISCARD ::contact::PeopleInfo* release_people();
  ::contact::PeopleInfo* mutable_people();
  void set_allocated_people(::contact::PeopleInfo* people);
  private:
  const ::contact::PeopleInfo& _internal_people() const;
  ::contact::PeopleInfo* _internal_mutable_people();
  public:
  void unsafe_arena_set_allocated_people(
      ::contact::PeopleInfo* people);
  ::contact::PeopleInfo* unsafe_arena_release_people();

  // .contact.WebStatus status = 2;
  void clear_status();
  ::contact::WebStatus status() const;
  void set_status(::contact::WebStatus value);
  private:
  ::contact::WebStatus _internal_status() const;
  void _internal_set_status(::contact::WebStatus value);
  public:

  // @@protoc_insertion_point(class_scope:contact.AddContactRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::contact::PeopleInfo* people_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contact_2eproto;
};
// -------------------------------------------------------------------

class AddContactResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contact.AddContactResponse) */ {
 public:
  inline AddContactResponse() : AddContactResponse(nullptr) {}
  ~AddContactResponse() override;
  explicit PROTOBUF_CONSTEXPR AddContactResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddContactResponse(const AddContactResponse& from);
  AddContactResponse(AddContactResponse&& from) noexcept
    : AddContactResponse() {
    *this = ::std::move(from);
  }

  inline AddContactResponse& operator=(const AddContactResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddContactResponse& operator=(AddContactResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddContactResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddContactResponse* internal_default_instance() {
    return reinterpret_cast<const AddContactResponse*>(
               &_AddContactResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddContactResponse& a, AddContactResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddContactResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddContactResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddContactResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddContactResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddContactResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddContactResponse& from) {
    AddContactResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddContactResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contact.AddContactResponse";
  }
  protected:
  explicit AddContactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .contact.WebStatus status = 2;
  void clear_status();
  ::contact::WebStatus status() const;
  void set_status(::contact::WebStatus value);
  private:
  ::contact::WebStatus _internal_status() const;
  void _internal_set_status(::contact::WebStatus value);
  public:

  // @@protoc_insertion_point(class_scope:contact.AddContactResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contact_2eproto;
};
// -------------------------------------------------------------------

class DelContactRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contact.DelContactRequest) */ {
 public:
  inline DelContactRequest() : DelContactRequest(nullptr) {}
  ~DelContactRequest() override;
  explicit PROTOBUF_CONSTEXPR DelContactRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelContactRequest(const DelContactRequest& from);
  DelContactRequest(DelContactRequest&& from) noexcept
    : DelContactRequest() {
    *this = ::std::move(from);
  }

  inline DelContactRequest& operator=(const DelContactRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelContactRequest& operator=(DelContactRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelContactRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelContactRequest* internal_default_instance() {
    return reinterpret_cast<const DelContactRequest*>(
               &_DelContactRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DelContactRequest& a, DelContactRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DelContactRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelContactRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelContactRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelContactRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelContactRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DelContactRequest& from) {
    DelContactRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelContactRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contact.DelContactRequest";
  }
  protected:
  explicit DelContactRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kNameFieldNumber = 3,
    kStatusFieldNumber = 2,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .contact.WebStatus status = 2;
  void clear_status();
  ::contact::WebStatus status() const;
  void set_status(::contact::WebStatus value);
  private:
  ::contact::WebStatus _internal_status() const;
  void _internal_set_status(::contact::WebStatus value);
  public:

  // @@protoc_insertion_point(class_scope:contact.DelContactRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contact_2eproto;
};
// -------------------------------------------------------------------

class DelContactResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contact.DelContactResponse) */ {
 public:
  inline DelContactResponse() : DelContactResponse(nullptr) {}
  ~DelContactResponse() override;
  explicit PROTOBUF_CONSTEXPR DelContactResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelContactResponse(const DelContactResponse& from);
  DelContactResponse(DelContactResponse&& from) noexcept
    : DelContactResponse() {
    *this = ::std::move(from);
  }

  inline DelContactResponse& operator=(const DelContactResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelContactResponse& operator=(DelContactResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelContactResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelContactResponse* internal_default_instance() {
    return reinterpret_cast<const DelContactResponse*>(
               &_DelContactResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DelContactResponse& a, DelContactResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DelContactResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelContactResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelContactResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelContactResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelContactResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DelContactResponse& from) {
    DelContactResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelContactResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contact.DelContactResponse";
  }
  protected:
  explicit DelContactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .contact.WebStatus status = 2;
  void clear_status();
  ::contact::WebStatus status() const;
  void set_status(::contact::WebStatus value);
  private:
  ::contact::WebStatus _internal_status() const;
  void _internal_set_status(::contact::WebStatus value);
  public:

  // @@protoc_insertion_point(class_scope:contact.DelContactResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contact_2eproto;
};
// -------------------------------------------------------------------

class FindContactRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contact.FindContactRequest) */ {
 public:
  inline FindContactRequest() : FindContactRequest(nullptr) {}
  ~FindContactRequest() override;
  explicit PROTOBUF_CONSTEXPR FindContactRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindContactRequest(const FindContactRequest& from);
  FindContactRequest(FindContactRequest&& from) noexcept
    : FindContactRequest() {
    *this = ::std::move(from);
  }

  inline FindContactRequest& operator=(const FindContactRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindContactRequest& operator=(FindContactRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindContactRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindContactRequest* internal_default_instance() {
    return reinterpret_cast<const FindContactRequest*>(
               &_FindContactRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FindContactRequest& a, FindContactRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindContactRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindContactRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindContactRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindContactRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindContactRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindContactRequest& from) {
    FindContactRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindContactRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contact.FindContactRequest";
  }
  protected:
  explicit FindContactRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kNameFieldNumber = 3,
    kStatusFieldNumber = 2,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .contact.WebStatus status = 2;
  void clear_status();
  ::contact::WebStatus status() const;
  void set_status(::contact::WebStatus value);
  private:
  ::contact::WebStatus _internal_status() const;
  void _internal_set_status(::contact::WebStatus value);
  public:

  // @@protoc_insertion_point(class_scope:contact.FindContactRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contact_2eproto;
};
// -------------------------------------------------------------------

class FindContactResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contact.FindContactResponse) */ {
 public:
  inline FindContactResponse() : FindContactResponse(nullptr) {}
  ~FindContactResponse() override;
  explicit PROTOBUF_CONSTEXPR FindContactResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindContactResponse(const FindContactResponse& from);
  FindContactResponse(FindContactResponse&& from) noexcept
    : FindContactResponse() {
    *this = ::std::move(from);
  }

  inline FindContactResponse& operator=(const FindContactResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindContactResponse& operator=(FindContactResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindContactResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindContactResponse* internal_default_instance() {
    return reinterpret_cast<const FindContactResponse*>(
               &_FindContactResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FindContactResponse& a, FindContactResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindContactResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindContactResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindContactResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindContactResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindContactResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindContactResponse& from) {
    FindContactResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindContactResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contact.FindContactResponse";
  }
  protected:
  explicit FindContactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kPeopleFieldNumber = 3,
    kStatusFieldNumber = 2,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .contact.PeopleInfo people = 3;
  bool has_people() const;
  private:
  bool _internal_has_people() const;
  public:
  void clear_people();
  const ::contact::PeopleInfo& people() const;
  PROTOBUF_NODISCARD ::contact::PeopleInfo* release_people();
  ::contact::PeopleInfo* mutable_people();
  void set_allocated_people(::contact::PeopleInfo* people);
  private:
  const ::contact::PeopleInfo& _internal_people() const;
  ::contact::PeopleInfo* _internal_mutable_people();
  public:
  void unsafe_arena_set_allocated_people(
      ::contact::PeopleInfo* people);
  ::contact::PeopleInfo* unsafe_arena_release_people();

  // .contact.WebStatus status = 2;
  void clear_status();
  ::contact::WebStatus status() const;
  void set_status(::contact::WebStatus value);
  private:
  ::contact::WebStatus _internal_status() const;
  void _internal_set_status(::contact::WebStatus value);
  public:

  // @@protoc_insertion_point(class_scope:contact.FindContactResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::contact::PeopleInfo* people_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contact_2eproto;
};
// -------------------------------------------------------------------

class ListContactResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contact.ListContactResponse) */ {
 public:
  inline ListContactResponse() : ListContactResponse(nullptr) {}
  ~ListContactResponse() override;
  explicit PROTOBUF_CONSTEXPR ListContactResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListContactResponse(const ListContactResponse& from);
  ListContactResponse(ListContactResponse&& from) noexcept
    : ListContactResponse() {
    *this = ::std::move(from);
  }

  inline ListContactResponse& operator=(const ListContactResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListContactResponse& operator=(ListContactResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListContactResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListContactResponse* internal_default_instance() {
    return reinterpret_cast<const ListContactResponse*>(
               &_ListContactResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListContactResponse& a, ListContactResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListContactResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListContactResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListContactResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListContactResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListContactResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListContactResponse& from) {
    ListContactResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListContactResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contact.ListContactResponse";
  }
  protected:
  explicit ListContactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kContactsFieldNumber = 3,
    kStatusFieldNumber = 2,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .contact.Contacts contacts = 3;
  bool has_contacts() const;
  private:
  bool _internal_has_contacts() const;
  public:
  void clear_contacts();
  const ::contact::Contacts& contacts() const;
  PROTOBUF_NODISCARD ::contact::Contacts* release_contacts();
  ::contact::Contacts* mutable_contacts();
  void set_allocated_contacts(::contact::Contacts* contacts);
  private:
  const ::contact::Contacts& _internal_contacts() const;
  ::contact::Contacts* _internal_mutable_contacts();
  public:
  void unsafe_arena_set_allocated_contacts(
      ::contact::Contacts* contacts);
  ::contact::Contacts* unsafe_arena_release_contacts();

  // .contact.WebStatus status = 2;
  void clear_status();
  ::contact::WebStatus status() const;
  void set_status(::contact::WebStatus value);
  private:
  ::contact::WebStatus _internal_status() const;
  void _internal_set_status(::contact::WebStatus value);
  public:

  // @@protoc_insertion_point(class_scope:contact.ListContactResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::contact::Contacts* contacts_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_contact_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PeopleInfo_Phone

// -------------------------------------------------------------------

// PeopleInfo

// string name = 1;
inline void PeopleInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PeopleInfo::name() const {
  // @@protoc_insertion_point(field_get:contact.PeopleInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeopleInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:contact.PeopleInfo.name)
}
inline std::string* PeopleInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:contact.PeopleInfo.name)
  return _s;
}
inline const std::string& PeopleInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PeopleInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PeopleInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PeopleInfo::release_name() {
  // @@protoc_insertion_point(field_release:contact.PeopleInfo.name)
  return _impl_.name_.Release();
}
inline void PeopleInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:contact.PeopleInfo.name)
}

// int32 age = 2;
inline void PeopleInfo::clear_age() {
  _impl_.age_ = 0;
}
inline int32_t PeopleInfo::_internal_age() const {
  return _impl_.age_;
}
inline int32_t PeopleInfo::age() const {
  // @@protoc_insertion_point(field_get:contact.PeopleInfo.age)
  return _internal_age();
}
inline void PeopleInfo::_internal_set_age(int32_t value) {
  
  _impl_.age_ = value;
}
inline void PeopleInfo::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:contact.PeopleInfo.age)
}

// repeated .contact.PeopleInfo.Phone phones = 3;
inline int PeopleInfo::_internal_phones_size() const {
  return _impl_.phones_.size();
}
inline int PeopleInfo::phones_size() const {
  return _internal_phones_size();
}
inline void PeopleInfo::clear_phones() {
  _impl_.phones_.Clear();
}
inline ::contact::PeopleInfo_Phone* PeopleInfo::mutable_phones(int index) {
  // @@protoc_insertion_point(field_mutable:contact.PeopleInfo.phones)
  return _impl_.phones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contact::PeopleInfo_Phone >*
PeopleInfo::mutable_phones() {
  // @@protoc_insertion_point(field_mutable_list:contact.PeopleInfo.phones)
  return &_impl_.phones_;
}
inline const ::contact::PeopleInfo_Phone& PeopleInfo::_internal_phones(int index) const {
  return _impl_.phones_.Get(index);
}
inline const ::contact::PeopleInfo_Phone& PeopleInfo::phones(int index) const {
  // @@protoc_insertion_point(field_get:contact.PeopleInfo.phones)
  return _internal_phones(index);
}
inline ::contact::PeopleInfo_Phone* PeopleInfo::_internal_add_phones() {
  return _impl_.phones_.Add();
}
inline ::contact::PeopleInfo_Phone* PeopleInfo::add_phones() {
  ::contact::PeopleInfo_Phone* _add = _internal_add_phones();
  // @@protoc_insertion_point(field_add:contact.PeopleInfo.phones)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contact::PeopleInfo_Phone >&
PeopleInfo::phones() const {
  // @@protoc_insertion_point(field_list:contact.PeopleInfo.phones)
  return _impl_.phones_;
}

// -------------------------------------------------------------------

// Contacts

// repeated .contact.PeopleInfo contacts = 1;
inline int Contacts::_internal_contacts_size() const {
  return _impl_.contacts_.size();
}
inline int Contacts::contacts_size() const {
  return _internal_contacts_size();
}
inline void Contacts::clear_contacts() {
  _impl_.contacts_.Clear();
}
inline ::contact::PeopleInfo* Contacts::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:contact.Contacts.contacts)
  return _impl_.contacts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contact::PeopleInfo >*
Contacts::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:contact.Contacts.contacts)
  return &_impl_.contacts_;
}
inline const ::contact::PeopleInfo& Contacts::_internal_contacts(int index) const {
  return _impl_.contacts_.Get(index);
}
inline const ::contact::PeopleInfo& Contacts::contacts(int index) const {
  // @@protoc_insertion_point(field_get:contact.Contacts.contacts)
  return _internal_contacts(index);
}
inline ::contact::PeopleInfo* Contacts::_internal_add_contacts() {
  return _impl_.contacts_.Add();
}
inline ::contact::PeopleInfo* Contacts::add_contacts() {
  ::contact::PeopleInfo* _add = _internal_add_contacts();
  // @@protoc_insertion_point(field_add:contact.Contacts.contacts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contact::PeopleInfo >&
Contacts::contacts() const {
  // @@protoc_insertion_point(field_list:contact.Contacts.contacts)
  return _impl_.contacts_;
}

// -------------------------------------------------------------------

// AddContactRequest

// string msg = 1;
inline void AddContactRequest::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& AddContactRequest::msg() const {
  // @@protoc_insertion_point(field_get:contact.AddContactRequest.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddContactRequest::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:contact.AddContactRequest.msg)
}
inline std::string* AddContactRequest::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:contact.AddContactRequest.msg)
  return _s;
}
inline const std::string& AddContactRequest::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void AddContactRequest::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* AddContactRequest::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* AddContactRequest::release_msg() {
  // @@protoc_insertion_point(field_release:contact.AddContactRequest.msg)
  return _impl_.msg_.Release();
}
inline void AddContactRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:contact.AddContactRequest.msg)
}

// .contact.WebStatus status = 2;
inline void AddContactRequest::clear_status() {
  _impl_.status_ = 0;
}
inline ::contact::WebStatus AddContactRequest::_internal_status() const {
  return static_cast< ::contact::WebStatus >(_impl_.status_);
}
inline ::contact::WebStatus AddContactRequest::status() const {
  // @@protoc_insertion_point(field_get:contact.AddContactRequest.status)
  return _internal_status();
}
inline void AddContactRequest::_internal_set_status(::contact::WebStatus value) {
  
  _impl_.status_ = value;
}
inline void AddContactRequest::set_status(::contact::WebStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:contact.AddContactRequest.status)
}

// .contact.PeopleInfo people = 3;
inline bool AddContactRequest::_internal_has_people() const {
  return this != internal_default_instance() && _impl_.people_ != nullptr;
}
inline bool AddContactRequest::has_people() const {
  return _internal_has_people();
}
inline void AddContactRequest::clear_people() {
  if (GetArenaForAllocation() == nullptr && _impl_.people_ != nullptr) {
    delete _impl_.people_;
  }
  _impl_.people_ = nullptr;
}
inline const ::contact::PeopleInfo& AddContactRequest::_internal_people() const {
  const ::contact::PeopleInfo* p = _impl_.people_;
  return p != nullptr ? *p : reinterpret_cast<const ::contact::PeopleInfo&>(
      ::contact::_PeopleInfo_default_instance_);
}
inline const ::contact::PeopleInfo& AddContactRequest::people() const {
  // @@protoc_insertion_point(field_get:contact.AddContactRequest.people)
  return _internal_people();
}
inline void AddContactRequest::unsafe_arena_set_allocated_people(
    ::contact::PeopleInfo* people) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.people_);
  }
  _impl_.people_ = people;
  if (people) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:contact.AddContactRequest.people)
}
inline ::contact::PeopleInfo* AddContactRequest::release_people() {
  
  ::contact::PeopleInfo* temp = _impl_.people_;
  _impl_.people_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::contact::PeopleInfo* AddContactRequest::unsafe_arena_release_people() {
  // @@protoc_insertion_point(field_release:contact.AddContactRequest.people)
  
  ::contact::PeopleInfo* temp = _impl_.people_;
  _impl_.people_ = nullptr;
  return temp;
}
inline ::contact::PeopleInfo* AddContactRequest::_internal_mutable_people() {
  
  if (_impl_.people_ == nullptr) {
    auto* p = CreateMaybeMessage<::contact::PeopleInfo>(GetArenaForAllocation());
    _impl_.people_ = p;
  }
  return _impl_.people_;
}
inline ::contact::PeopleInfo* AddContactRequest::mutable_people() {
  ::contact::PeopleInfo* _msg = _internal_mutable_people();
  // @@protoc_insertion_point(field_mutable:contact.AddContactRequest.people)
  return _msg;
}
inline void AddContactRequest::set_allocated_people(::contact::PeopleInfo* people) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.people_;
  }
  if (people) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(people);
    if (message_arena != submessage_arena) {
      people = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, people, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.people_ = people;
  // @@protoc_insertion_point(field_set_allocated:contact.AddContactRequest.people)
}

// -------------------------------------------------------------------

// AddContactResponse

// string msg = 1;
inline void AddContactResponse::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& AddContactResponse::msg() const {
  // @@protoc_insertion_point(field_get:contact.AddContactResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddContactResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:contact.AddContactResponse.msg)
}
inline std::string* AddContactResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:contact.AddContactResponse.msg)
  return _s;
}
inline const std::string& AddContactResponse::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void AddContactResponse::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* AddContactResponse::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* AddContactResponse::release_msg() {
  // @@protoc_insertion_point(field_release:contact.AddContactResponse.msg)
  return _impl_.msg_.Release();
}
inline void AddContactResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:contact.AddContactResponse.msg)
}

// .contact.WebStatus status = 2;
inline void AddContactResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::contact::WebStatus AddContactResponse::_internal_status() const {
  return static_cast< ::contact::WebStatus >(_impl_.status_);
}
inline ::contact::WebStatus AddContactResponse::status() const {
  // @@protoc_insertion_point(field_get:contact.AddContactResponse.status)
  return _internal_status();
}
inline void AddContactResponse::_internal_set_status(::contact::WebStatus value) {
  
  _impl_.status_ = value;
}
inline void AddContactResponse::set_status(::contact::WebStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:contact.AddContactResponse.status)
}

// -------------------------------------------------------------------

// DelContactRequest

// string msg = 1;
inline void DelContactRequest::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& DelContactRequest::msg() const {
  // @@protoc_insertion_point(field_get:contact.DelContactRequest.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DelContactRequest::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:contact.DelContactRequest.msg)
}
inline std::string* DelContactRequest::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:contact.DelContactRequest.msg)
  return _s;
}
inline const std::string& DelContactRequest::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void DelContactRequest::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* DelContactRequest::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* DelContactRequest::release_msg() {
  // @@protoc_insertion_point(field_release:contact.DelContactRequest.msg)
  return _impl_.msg_.Release();
}
inline void DelContactRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:contact.DelContactRequest.msg)
}

// .contact.WebStatus status = 2;
inline void DelContactRequest::clear_status() {
  _impl_.status_ = 0;
}
inline ::contact::WebStatus DelContactRequest::_internal_status() const {
  return static_cast< ::contact::WebStatus >(_impl_.status_);
}
inline ::contact::WebStatus DelContactRequest::status() const {
  // @@protoc_insertion_point(field_get:contact.DelContactRequest.status)
  return _internal_status();
}
inline void DelContactRequest::_internal_set_status(::contact::WebStatus value) {
  
  _impl_.status_ = value;
}
inline void DelContactRequest::set_status(::contact::WebStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:contact.DelContactRequest.status)
}

// string name = 3;
inline void DelContactRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DelContactRequest::name() const {
  // @@protoc_insertion_point(field_get:contact.DelContactRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DelContactRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:contact.DelContactRequest.name)
}
inline std::string* DelContactRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:contact.DelContactRequest.name)
  return _s;
}
inline const std::string& DelContactRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DelContactRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DelContactRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DelContactRequest::release_name() {
  // @@protoc_insertion_point(field_release:contact.DelContactRequest.name)
  return _impl_.name_.Release();
}
inline void DelContactRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:contact.DelContactRequest.name)
}

// -------------------------------------------------------------------

// DelContactResponse

// string msg = 1;
inline void DelContactResponse::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& DelContactResponse::msg() const {
  // @@protoc_insertion_point(field_get:contact.DelContactResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DelContactResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:contact.DelContactResponse.msg)
}
inline std::string* DelContactResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:contact.DelContactResponse.msg)
  return _s;
}
inline const std::string& DelContactResponse::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void DelContactResponse::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* DelContactResponse::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* DelContactResponse::release_msg() {
  // @@protoc_insertion_point(field_release:contact.DelContactResponse.msg)
  return _impl_.msg_.Release();
}
inline void DelContactResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:contact.DelContactResponse.msg)
}

// .contact.WebStatus status = 2;
inline void DelContactResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::contact::WebStatus DelContactResponse::_internal_status() const {
  return static_cast< ::contact::WebStatus >(_impl_.status_);
}
inline ::contact::WebStatus DelContactResponse::status() const {
  // @@protoc_insertion_point(field_get:contact.DelContactResponse.status)
  return _internal_status();
}
inline void DelContactResponse::_internal_set_status(::contact::WebStatus value) {
  
  _impl_.status_ = value;
}
inline void DelContactResponse::set_status(::contact::WebStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:contact.DelContactResponse.status)
}

// -------------------------------------------------------------------

// FindContactRequest

// string msg = 1;
inline void FindContactRequest::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& FindContactRequest::msg() const {
  // @@protoc_insertion_point(field_get:contact.FindContactRequest.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindContactRequest::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:contact.FindContactRequest.msg)
}
inline std::string* FindContactRequest::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:contact.FindContactRequest.msg)
  return _s;
}
inline const std::string& FindContactRequest::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void FindContactRequest::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* FindContactRequest::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* FindContactRequest::release_msg() {
  // @@protoc_insertion_point(field_release:contact.FindContactRequest.msg)
  return _impl_.msg_.Release();
}
inline void FindContactRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:contact.FindContactRequest.msg)
}

// .contact.WebStatus status = 2;
inline void FindContactRequest::clear_status() {
  _impl_.status_ = 0;
}
inline ::contact::WebStatus FindContactRequest::_internal_status() const {
  return static_cast< ::contact::WebStatus >(_impl_.status_);
}
inline ::contact::WebStatus FindContactRequest::status() const {
  // @@protoc_insertion_point(field_get:contact.FindContactRequest.status)
  return _internal_status();
}
inline void FindContactRequest::_internal_set_status(::contact::WebStatus value) {
  
  _impl_.status_ = value;
}
inline void FindContactRequest::set_status(::contact::WebStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:contact.FindContactRequest.status)
}

// string name = 3;
inline void FindContactRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FindContactRequest::name() const {
  // @@protoc_insertion_point(field_get:contact.FindContactRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindContactRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:contact.FindContactRequest.name)
}
inline std::string* FindContactRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:contact.FindContactRequest.name)
  return _s;
}
inline const std::string& FindContactRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FindContactRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FindContactRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* FindContactRequest::release_name() {
  // @@protoc_insertion_point(field_release:contact.FindContactRequest.name)
  return _impl_.name_.Release();
}
inline void FindContactRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:contact.FindContactRequest.name)
}

// -------------------------------------------------------------------

// FindContactResponse

// string msg = 1;
inline void FindContactResponse::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& FindContactResponse::msg() const {
  // @@protoc_insertion_point(field_get:contact.FindContactResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindContactResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:contact.FindContactResponse.msg)
}
inline std::string* FindContactResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:contact.FindContactResponse.msg)
  return _s;
}
inline const std::string& FindContactResponse::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void FindContactResponse::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* FindContactResponse::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* FindContactResponse::release_msg() {
  // @@protoc_insertion_point(field_release:contact.FindContactResponse.msg)
  return _impl_.msg_.Release();
}
inline void FindContactResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:contact.FindContactResponse.msg)
}

// .contact.WebStatus status = 2;
inline void FindContactResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::contact::WebStatus FindContactResponse::_internal_status() const {
  return static_cast< ::contact::WebStatus >(_impl_.status_);
}
inline ::contact::WebStatus FindContactResponse::status() const {
  // @@protoc_insertion_point(field_get:contact.FindContactResponse.status)
  return _internal_status();
}
inline void FindContactResponse::_internal_set_status(::contact::WebStatus value) {
  
  _impl_.status_ = value;
}
inline void FindContactResponse::set_status(::contact::WebStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:contact.FindContactResponse.status)
}

// .contact.PeopleInfo people = 3;
inline bool FindContactResponse::_internal_has_people() const {
  return this != internal_default_instance() && _impl_.people_ != nullptr;
}
inline bool FindContactResponse::has_people() const {
  return _internal_has_people();
}
inline void FindContactResponse::clear_people() {
  if (GetArenaForAllocation() == nullptr && _impl_.people_ != nullptr) {
    delete _impl_.people_;
  }
  _impl_.people_ = nullptr;
}
inline const ::contact::PeopleInfo& FindContactResponse::_internal_people() const {
  const ::contact::PeopleInfo* p = _impl_.people_;
  return p != nullptr ? *p : reinterpret_cast<const ::contact::PeopleInfo&>(
      ::contact::_PeopleInfo_default_instance_);
}
inline const ::contact::PeopleInfo& FindContactResponse::people() const {
  // @@protoc_insertion_point(field_get:contact.FindContactResponse.people)
  return _internal_people();
}
inline void FindContactResponse::unsafe_arena_set_allocated_people(
    ::contact::PeopleInfo* people) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.people_);
  }
  _impl_.people_ = people;
  if (people) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:contact.FindContactResponse.people)
}
inline ::contact::PeopleInfo* FindContactResponse::release_people() {
  
  ::contact::PeopleInfo* temp = _impl_.people_;
  _impl_.people_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::contact::PeopleInfo* FindContactResponse::unsafe_arena_release_people() {
  // @@protoc_insertion_point(field_release:contact.FindContactResponse.people)
  
  ::contact::PeopleInfo* temp = _impl_.people_;
  _impl_.people_ = nullptr;
  return temp;
}
inline ::contact::PeopleInfo* FindContactResponse::_internal_mutable_people() {
  
  if (_impl_.people_ == nullptr) {
    auto* p = CreateMaybeMessage<::contact::PeopleInfo>(GetArenaForAllocation());
    _impl_.people_ = p;
  }
  return _impl_.people_;
}
inline ::contact::PeopleInfo* FindContactResponse::mutable_people() {
  ::contact::PeopleInfo* _msg = _internal_mutable_people();
  // @@protoc_insertion_point(field_mutable:contact.FindContactResponse.people)
  return _msg;
}
inline void FindContactResponse::set_allocated_people(::contact::PeopleInfo* people) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.people_;
  }
  if (people) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(people);
    if (message_arena != submessage_arena) {
      people = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, people, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.people_ = people;
  // @@protoc_insertion_point(field_set_allocated:contact.FindContactResponse.people)
}

// -------------------------------------------------------------------

// ListContactResponse

// string msg = 1;
inline void ListContactResponse::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& ListContactResponse::msg() const {
  // @@protoc_insertion_point(field_get:contact.ListContactResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListContactResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:contact.ListContactResponse.msg)
}
inline std::string* ListContactResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:contact.ListContactResponse.msg)
  return _s;
}
inline const std::string& ListContactResponse::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void ListContactResponse::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* ListContactResponse::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* ListContactResponse::release_msg() {
  // @@protoc_insertion_point(field_release:contact.ListContactResponse.msg)
  return _impl_.msg_.Release();
}
inline void ListContactResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:contact.ListContactResponse.msg)
}

// .contact.WebStatus status = 2;
inline void ListContactResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::contact::WebStatus ListContactResponse::_internal_status() const {
  return static_cast< ::contact::WebStatus >(_impl_.status_);
}
inline ::contact::WebStatus ListContactResponse::status() const {
  // @@protoc_insertion_point(field_get:contact.ListContactResponse.status)
  return _internal_status();
}
inline void ListContactResponse::_internal_set_status(::contact::WebStatus value) {
  
  _impl_.status_ = value;
}
inline void ListContactResponse::set_status(::contact::WebStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:contact.ListContactResponse.status)
}

// .contact.Contacts contacts = 3;
inline bool ListContactResponse::_internal_has_contacts() const {
  return this != internal_default_instance() && _impl_.contacts_ != nullptr;
}
inline bool ListContactResponse::has_contacts() const {
  return _internal_has_contacts();
}
inline void ListContactResponse::clear_contacts() {
  if (GetArenaForAllocation() == nullptr && _impl_.contacts_ != nullptr) {
    delete _impl_.contacts_;
  }
  _impl_.contacts_ = nullptr;
}
inline const ::contact::Contacts& ListContactResponse::_internal_contacts() const {
  const ::contact::Contacts* p = _impl_.contacts_;
  return p != nullptr ? *p : reinterpret_cast<const ::contact::Contacts&>(
      ::contact::_Contacts_default_instance_);
}
inline const ::contact::Contacts& ListContactResponse::contacts() const {
  // @@protoc_insertion_point(field_get:contact.ListContactResponse.contacts)
  return _internal_contacts();
}
inline void ListContactResponse::unsafe_arena_set_allocated_contacts(
    ::contact::Contacts* contacts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contacts_);
  }
  _impl_.contacts_ = contacts;
  if (contacts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:contact.ListContactResponse.contacts)
}
inline ::contact::Contacts* ListContactResponse::release_contacts() {
  
  ::contact::Contacts* temp = _impl_.contacts_;
  _impl_.contacts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::contact::Contacts* ListContactResponse::unsafe_arena_release_contacts() {
  // @@protoc_insertion_point(field_release:contact.ListContactResponse.contacts)
  
  ::contact::Contacts* temp = _impl_.contacts_;
  _impl_.contacts_ = nullptr;
  return temp;
}
inline ::contact::Contacts* ListContactResponse::_internal_mutable_contacts() {
  
  if (_impl_.contacts_ == nullptr) {
    auto* p = CreateMaybeMessage<::contact::Contacts>(GetArenaForAllocation());
    _impl_.contacts_ = p;
  }
  return _impl_.contacts_;
}
inline ::contact::Contacts* ListContactResponse::mutable_contacts() {
  ::contact::Contacts* _msg = _internal_mutable_contacts();
  // @@protoc_insertion_point(field_mutable:contact.ListContactResponse.contacts)
  return _msg;
}
inline void ListContactResponse::set_allocated_contacts(::contact::Contacts* contacts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.contacts_;
  }
  if (contacts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(contacts);
    if (message_arena != submessage_arena) {
      contacts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contacts, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.contacts_ = contacts;
  // @@protoc_insertion_point(field_set_allocated:contact.ListContactResponse.contacts)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace contact

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::contact::PeopleInfo_Phone_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::contact::PeopleInfo_Phone_type>() {
  return ::contact::PeopleInfo_Phone_type_descriptor();
}
template <> struct is_proto_enum< ::contact::WebStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::contact::WebStatus>() {
  return ::contact::WebStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_contact_2eproto
